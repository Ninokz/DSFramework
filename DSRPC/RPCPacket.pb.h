// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCPacket.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_RPCPacket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_RPCPacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_RPCPacket_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_RPCPacket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_RPCPacket_2eproto;
namespace DSFramework {
namespace DSRPC {
namespace Packet {
class RPCPacket;
struct RPCPacketDefaultTypeInternal;
extern RPCPacketDefaultTypeInternal _RPCPacket_default_instance_;
class RPCTask;
struct RPCTaskDefaultTypeInternal;
extern RPCTaskDefaultTypeInternal _RPCTask_default_instance_;
}  // namespace Packet
}  // namespace DSRPC
}  // namespace DSFramework
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace DSFramework {
namespace DSRPC {
namespace Packet {
enum RPCTaskResultError : int {
  TASK_NO_ERROR = 0,
  TASK_SERVICE_NOT_FOUND = 1,
  TASK_INVALID_ARGUMENT = 2,
  TASK_SERVICE_EXCEPTION = 3,
  RPCTaskResultError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RPCTaskResultError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RPCTaskResultError_IsValid(int value);
extern const uint32_t RPCTaskResultError_internal_data_[];
constexpr RPCTaskResultError RPCTaskResultError_MIN = static_cast<RPCTaskResultError>(0);
constexpr RPCTaskResultError RPCTaskResultError_MAX = static_cast<RPCTaskResultError>(3);
constexpr int RPCTaskResultError_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RPCTaskResultError_descriptor();
template <typename T>
const std::string& RPCTaskResultError_Name(T value) {
  static_assert(std::is_same<T, RPCTaskResultError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RPCTaskResultError_Name().");
  return RPCTaskResultError_Name(static_cast<RPCTaskResultError>(value));
}
template <>
inline const std::string& RPCTaskResultError_Name(RPCTaskResultError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RPCTaskResultError_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RPCTaskResultError_Parse(absl::string_view name, RPCTaskResultError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCTaskResultError>(
      RPCTaskResultError_descriptor(), name, value);
}
enum RPCTaskStatus : int {
  WAITING = 0,
  COMMITED = 1,
  CANCELED = 2,
  COMPLETED = 3,
  RPCTaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RPCTaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RPCTaskStatus_IsValid(int value);
extern const uint32_t RPCTaskStatus_internal_data_[];
constexpr RPCTaskStatus RPCTaskStatus_MIN = static_cast<RPCTaskStatus>(0);
constexpr RPCTaskStatus RPCTaskStatus_MAX = static_cast<RPCTaskStatus>(3);
constexpr int RPCTaskStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RPCTaskStatus_descriptor();
template <typename T>
const std::string& RPCTaskStatus_Name(T value) {
  static_assert(std::is_same<T, RPCTaskStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RPCTaskStatus_Name().");
  return RPCTaskStatus_Name(static_cast<RPCTaskStatus>(value));
}
template <>
inline const std::string& RPCTaskStatus_Name(RPCTaskStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RPCTaskStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RPCTaskStatus_Parse(absl::string_view name, RPCTaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCTaskStatus>(
      RPCTaskStatus_descriptor(), name, value);
}
enum RPCPacketType : int {
  RPC_TASK_REQUEST = 0,
  RPC_TASK_RESPONSE = 1,
  RPC_TASK_QUERY = 2,
  RPC_TASK_QUERY_RESPONSE = 3,
  RPCPacketType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RPCPacketType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RPCPacketType_IsValid(int value);
extern const uint32_t RPCPacketType_internal_data_[];
constexpr RPCPacketType RPCPacketType_MIN = static_cast<RPCPacketType>(0);
constexpr RPCPacketType RPCPacketType_MAX = static_cast<RPCPacketType>(3);
constexpr int RPCPacketType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RPCPacketType_descriptor();
template <typename T>
const std::string& RPCPacketType_Name(T value) {
  static_assert(std::is_same<T, RPCPacketType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RPCPacketType_Name().");
  return RPCPacketType_Name(static_cast<RPCPacketType>(value));
}
template <>
inline const std::string& RPCPacketType_Name(RPCPacketType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RPCPacketType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RPCPacketType_Parse(absl::string_view name, RPCPacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCPacketType>(
      RPCPacketType_descriptor(), name, value);
}
enum RPCPacketError : int {
  PKT_NO_ERROR = 0,
  PKT_SERIALIZATION_ERROR = 1,
  PKT_DESERIALIZATION_ERROR = 2,
  RPCPacketError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RPCPacketError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RPCPacketError_IsValid(int value);
extern const uint32_t RPCPacketError_internal_data_[];
constexpr RPCPacketError RPCPacketError_MIN = static_cast<RPCPacketError>(0);
constexpr RPCPacketError RPCPacketError_MAX = static_cast<RPCPacketError>(2);
constexpr int RPCPacketError_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
RPCPacketError_descriptor();
template <typename T>
const std::string& RPCPacketError_Name(T value) {
  static_assert(std::is_same<T, RPCPacketError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RPCPacketError_Name().");
  return RPCPacketError_Name(static_cast<RPCPacketError>(value));
}
template <>
inline const std::string& RPCPacketError_Name(RPCPacketError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RPCPacketError_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RPCPacketError_Parse(absl::string_view name, RPCPacketError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCPacketError>(
      RPCPacketError_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RPCTask final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSFramework.DSRPC.Packet.RPCTask) */ {
 public:
  inline RPCTask() : RPCTask(nullptr) {}
  ~RPCTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RPCTask(::google::protobuf::internal::ConstantInitialized);

  inline RPCTask(const RPCTask& from)
      : RPCTask(nullptr, from) {}
  RPCTask(RPCTask&& from) noexcept
    : RPCTask() {
    *this = ::std::move(from);
  }

  inline RPCTask& operator=(const RPCTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCTask& operator=(RPCTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCTask* internal_default_instance() {
    return reinterpret_cast<const RPCTask*>(
               &_RPCTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPCTask& a, RPCTask& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCTask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RPCTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RPCTask& from) {
    RPCTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RPCTask* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "DSFramework.DSRPC.Packet.RPCTask";
  }
  protected:
  explicit RPCTask(::google::protobuf::Arena* arena);
  RPCTask(::google::protobuf::Arena* arena, const RPCTask& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskUidFieldNumber = 1,
    kSubmitterUidFieldNumber = 2,
    kHandlerUidFieldNumber = 3,
    kCreateedTimeFieldNumber = 4,
    kCommitedTimeFieldNumber = 5,
    kCompletedTimeFieldNumber = 6,
    kServiceFieldNumber = 7,
    kArgsFieldNumber = 8,
    kResultFieldNumber = 9,
    kTaskStatusFieldNumber = 10,
    kTaskErrorFieldNumber = 11,
  };
  // string task_uid = 1;
  void clear_task_uid() ;
  const std::string& task_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_uid(Arg_&& arg, Args_... args);
  std::string* mutable_task_uid();
  PROTOBUF_NODISCARD std::string* release_task_uid();
  void set_allocated_task_uid(std::string* value);

  private:
  const std::string& _internal_task_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_uid(
      const std::string& value);
  std::string* _internal_mutable_task_uid();

  public:
  // string submitter_uid = 2;
  void clear_submitter_uid() ;
  const std::string& submitter_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_submitter_uid(Arg_&& arg, Args_... args);
  std::string* mutable_submitter_uid();
  PROTOBUF_NODISCARD std::string* release_submitter_uid();
  void set_allocated_submitter_uid(std::string* value);

  private:
  const std::string& _internal_submitter_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submitter_uid(
      const std::string& value);
  std::string* _internal_mutable_submitter_uid();

  public:
  // string handler_uid = 3;
  void clear_handler_uid() ;
  const std::string& handler_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_handler_uid(Arg_&& arg, Args_... args);
  std::string* mutable_handler_uid();
  PROTOBUF_NODISCARD std::string* release_handler_uid();
  void set_allocated_handler_uid(std::string* value);

  private:
  const std::string& _internal_handler_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handler_uid(
      const std::string& value);
  std::string* _internal_mutable_handler_uid();

  public:
  // string createed_time = 4;
  void clear_createed_time() ;
  const std::string& createed_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_createed_time(Arg_&& arg, Args_... args);
  std::string* mutable_createed_time();
  PROTOBUF_NODISCARD std::string* release_createed_time();
  void set_allocated_createed_time(std::string* value);

  private:
  const std::string& _internal_createed_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createed_time(
      const std::string& value);
  std::string* _internal_mutable_createed_time();

  public:
  // string commited_time = 5;
  void clear_commited_time() ;
  const std::string& commited_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commited_time(Arg_&& arg, Args_... args);
  std::string* mutable_commited_time();
  PROTOBUF_NODISCARD std::string* release_commited_time();
  void set_allocated_commited_time(std::string* value);

  private:
  const std::string& _internal_commited_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commited_time(
      const std::string& value);
  std::string* _internal_mutable_commited_time();

  public:
  // string completed_time = 6;
  void clear_completed_time() ;
  const std::string& completed_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_completed_time(Arg_&& arg, Args_... args);
  std::string* mutable_completed_time();
  PROTOBUF_NODISCARD std::string* release_completed_time();
  void set_allocated_completed_time(std::string* value);

  private:
  const std::string& _internal_completed_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_completed_time(
      const std::string& value);
  std::string* _internal_mutable_completed_time();

  public:
  // string service = 7;
  void clear_service() ;
  const std::string& service() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* value);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // .google.protobuf.Any args = 8;
  bool has_args() const;
  void clear_args() ;
  const ::google::protobuf::Any& args() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_args();
  ::google::protobuf::Any* mutable_args();
  void set_allocated_args(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_args(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_args();

  private:
  const ::google::protobuf::Any& _internal_args() const;
  ::google::protobuf::Any* _internal_mutable_args();

  public:
  // .google.protobuf.Any result = 9;
  bool has_result() const;
  void clear_result() ;
  const ::google::protobuf::Any& result() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_result();
  ::google::protobuf::Any* mutable_result();
  void set_allocated_result(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_result(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_result();

  private:
  const ::google::protobuf::Any& _internal_result() const;
  ::google::protobuf::Any* _internal_mutable_result();

  public:
  // .DSFramework.DSRPC.Packet.RPCTaskStatus task_status = 10;
  void clear_task_status() ;
  ::DSFramework::DSRPC::Packet::RPCTaskStatus task_status() const;
  void set_task_status(::DSFramework::DSRPC::Packet::RPCTaskStatus value);

  private:
  ::DSFramework::DSRPC::Packet::RPCTaskStatus _internal_task_status() const;
  void _internal_set_task_status(::DSFramework::DSRPC::Packet::RPCTaskStatus value);

  public:
  // .DSFramework.DSRPC.Packet.RPCTaskResultError task_error = 11;
  void clear_task_error() ;
  ::DSFramework::DSRPC::Packet::RPCTaskResultError task_error() const;
  void set_task_error(::DSFramework::DSRPC::Packet::RPCTaskResultError value);

  private:
  ::DSFramework::DSRPC::Packet::RPCTaskResultError _internal_task_error() const;
  void _internal_set_task_error(::DSFramework::DSRPC::Packet::RPCTaskResultError value);

  public:
  // @@protoc_insertion_point(class_scope:DSFramework.DSRPC.Packet.RPCTask)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      128, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr task_uid_;
    ::google::protobuf::internal::ArenaStringPtr submitter_uid_;
    ::google::protobuf::internal::ArenaStringPtr handler_uid_;
    ::google::protobuf::internal::ArenaStringPtr createed_time_;
    ::google::protobuf::internal::ArenaStringPtr commited_time_;
    ::google::protobuf::internal::ArenaStringPtr completed_time_;
    ::google::protobuf::internal::ArenaStringPtr service_;
    ::google::protobuf::Any* args_;
    ::google::protobuf::Any* result_;
    int task_status_;
    int task_error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCPacket_2eproto;
};// -------------------------------------------------------------------

class RPCPacket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSFramework.DSRPC.Packet.RPCPacket) */ {
 public:
  inline RPCPacket() : RPCPacket(nullptr) {}
  ~RPCPacket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RPCPacket(::google::protobuf::internal::ConstantInitialized);

  inline RPCPacket(const RPCPacket& from)
      : RPCPacket(nullptr, from) {}
  RPCPacket(RPCPacket&& from) noexcept
    : RPCPacket() {
    *this = ::std::move(from);
  }

  inline RPCPacket& operator=(const RPCPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCPacket& operator=(RPCPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCPacket* internal_default_instance() {
    return reinterpret_cast<const RPCPacket*>(
               &_RPCPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPCPacket& a, RPCPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCPacket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RPCPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RPCPacket& from) {
    RPCPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RPCPacket* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "DSFramework.DSRPC.Packet.RPCPacket";
  }
  protected:
  explicit RPCPacket(::google::protobuf::Arena* arena);
  RPCPacket(::google::protobuf::Arena* arena, const RPCPacket& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTaskFieldNumber = 3,
    kPktTypeFieldNumber = 4,
    kPktErrorFieldNumber = 5,
  };
  // string from = 1;
  void clear_from() ;
  const std::string& from() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from(Arg_&& arg, Args_... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* value);

  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(
      const std::string& value);
  std::string* _internal_mutable_from();

  public:
  // string to = 2;
  void clear_to() ;
  const std::string& to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* value);

  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(
      const std::string& value);
  std::string* _internal_mutable_to();

  public:
  // .DSFramework.DSRPC.Packet.RPCTask task = 3;
  bool has_task() const;
  void clear_task() ;
  const ::DSFramework::DSRPC::Packet::RPCTask& task() const;
  PROTOBUF_NODISCARD ::DSFramework::DSRPC::Packet::RPCTask* release_task();
  ::DSFramework::DSRPC::Packet::RPCTask* mutable_task();
  void set_allocated_task(::DSFramework::DSRPC::Packet::RPCTask* value);
  void unsafe_arena_set_allocated_task(::DSFramework::DSRPC::Packet::RPCTask* value);
  ::DSFramework::DSRPC::Packet::RPCTask* unsafe_arena_release_task();

  private:
  const ::DSFramework::DSRPC::Packet::RPCTask& _internal_task() const;
  ::DSFramework::DSRPC::Packet::RPCTask* _internal_mutable_task();

  public:
  // .DSFramework.DSRPC.Packet.RPCPacketType pkt_type = 4;
  void clear_pkt_type() ;
  ::DSFramework::DSRPC::Packet::RPCPacketType pkt_type() const;
  void set_pkt_type(::DSFramework::DSRPC::Packet::RPCPacketType value);

  private:
  ::DSFramework::DSRPC::Packet::RPCPacketType _internal_pkt_type() const;
  void _internal_set_pkt_type(::DSFramework::DSRPC::Packet::RPCPacketType value);

  public:
  // .DSFramework.DSRPC.Packet.RPCPacketError pkt_error = 5;
  void clear_pkt_error() ;
  ::DSFramework::DSRPC::Packet::RPCPacketError pkt_error() const;
  void set_pkt_error(::DSFramework::DSRPC::Packet::RPCPacketError value);

  private:
  ::DSFramework::DSRPC::Packet::RPCPacketError _internal_pkt_error() const;
  void _internal_set_pkt_error(::DSFramework::DSRPC::Packet::RPCPacketError value);

  public:
  // @@protoc_insertion_point(class_scope:DSFramework.DSRPC.Packet.RPCPacket)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr from_;
    ::google::protobuf::internal::ArenaStringPtr to_;
    ::DSFramework::DSRPC::Packet::RPCTask* task_;
    int pkt_type_;
    int pkt_error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCPacket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RPCTask

// string task_uid = 1;
inline void RPCTask::clear_task_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_uid_.ClearToEmpty();
}
inline const std::string& RPCTask::task_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.task_uid)
  return _internal_task_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_task_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.task_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.task_uid)
}
inline std::string* RPCTask::mutable_task_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_uid();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.task_uid)
  return _s;
}
inline const std::string& RPCTask::_internal_task_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.task_uid_.Get();
}
inline void RPCTask::_internal_set_task_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.task_uid_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_task_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.task_uid_.Mutable( GetArena());
}
inline std::string* RPCTask::release_task_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.task_uid)
  return _impl_.task_uid_.Release();
}
inline void RPCTask::set_allocated_task_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.task_uid_.IsDefault()) {
          _impl_.task_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.task_uid)
}

// string submitter_uid = 2;
inline void RPCTask::clear_submitter_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.submitter_uid_.ClearToEmpty();
}
inline const std::string& RPCTask::submitter_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.submitter_uid)
  return _internal_submitter_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_submitter_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.submitter_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.submitter_uid)
}
inline std::string* RPCTask::mutable_submitter_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_submitter_uid();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.submitter_uid)
  return _s;
}
inline const std::string& RPCTask::_internal_submitter_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.submitter_uid_.Get();
}
inline void RPCTask::_internal_set_submitter_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.submitter_uid_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_submitter_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.submitter_uid_.Mutable( GetArena());
}
inline std::string* RPCTask::release_submitter_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.submitter_uid)
  return _impl_.submitter_uid_.Release();
}
inline void RPCTask::set_allocated_submitter_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.submitter_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.submitter_uid_.IsDefault()) {
          _impl_.submitter_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.submitter_uid)
}

// string handler_uid = 3;
inline void RPCTask::clear_handler_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.handler_uid_.ClearToEmpty();
}
inline const std::string& RPCTask::handler_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.handler_uid)
  return _internal_handler_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_handler_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.handler_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.handler_uid)
}
inline std::string* RPCTask::mutable_handler_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_handler_uid();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.handler_uid)
  return _s;
}
inline const std::string& RPCTask::_internal_handler_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.handler_uid_.Get();
}
inline void RPCTask::_internal_set_handler_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.handler_uid_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_handler_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.handler_uid_.Mutable( GetArena());
}
inline std::string* RPCTask::release_handler_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.handler_uid)
  return _impl_.handler_uid_.Release();
}
inline void RPCTask::set_allocated_handler_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.handler_uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.handler_uid_.IsDefault()) {
          _impl_.handler_uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.handler_uid)
}

// string createed_time = 4;
inline void RPCTask::clear_createed_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.createed_time_.ClearToEmpty();
}
inline const std::string& RPCTask::createed_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.createed_time)
  return _internal_createed_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_createed_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.createed_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.createed_time)
}
inline std::string* RPCTask::mutable_createed_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_createed_time();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.createed_time)
  return _s;
}
inline const std::string& RPCTask::_internal_createed_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.createed_time_.Get();
}
inline void RPCTask::_internal_set_createed_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.createed_time_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_createed_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.createed_time_.Mutable( GetArena());
}
inline std::string* RPCTask::release_createed_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.createed_time)
  return _impl_.createed_time_.Release();
}
inline void RPCTask::set_allocated_createed_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.createed_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.createed_time_.IsDefault()) {
          _impl_.createed_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.createed_time)
}

// string commited_time = 5;
inline void RPCTask::clear_commited_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commited_time_.ClearToEmpty();
}
inline const std::string& RPCTask::commited_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.commited_time)
  return _internal_commited_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_commited_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commited_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.commited_time)
}
inline std::string* RPCTask::mutable_commited_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_commited_time();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.commited_time)
  return _s;
}
inline const std::string& RPCTask::_internal_commited_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.commited_time_.Get();
}
inline void RPCTask::_internal_set_commited_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commited_time_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_commited_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.commited_time_.Mutable( GetArena());
}
inline std::string* RPCTask::release_commited_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.commited_time)
  return _impl_.commited_time_.Release();
}
inline void RPCTask::set_allocated_commited_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commited_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commited_time_.IsDefault()) {
          _impl_.commited_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.commited_time)
}

// string completed_time = 6;
inline void RPCTask::clear_completed_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.completed_time_.ClearToEmpty();
}
inline const std::string& RPCTask::completed_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.completed_time)
  return _internal_completed_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_completed_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.completed_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.completed_time)
}
inline std::string* RPCTask::mutable_completed_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_completed_time();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.completed_time)
  return _s;
}
inline const std::string& RPCTask::_internal_completed_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.completed_time_.Get();
}
inline void RPCTask::_internal_set_completed_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.completed_time_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_completed_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.completed_time_.Mutable( GetArena());
}
inline std::string* RPCTask::release_completed_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.completed_time)
  return _impl_.completed_time_.Release();
}
inline void RPCTask::set_allocated_completed_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.completed_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.completed_time_.IsDefault()) {
          _impl_.completed_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.completed_time)
}

// string service = 7;
inline void RPCTask::clear_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.ClearToEmpty();
}
inline const std::string& RPCTask::service() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCTask::set_service(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.service)
}
inline std::string* RPCTask::mutable_service() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.service)
  return _s;
}
inline const std::string& RPCTask::_internal_service() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_.Get();
}
inline void RPCTask::_internal_set_service(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(value, GetArena());
}
inline std::string* RPCTask::_internal_mutable_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.service_.Mutable( GetArena());
}
inline std::string* RPCTask::release_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.service)
  return _impl_.service_.Release();
}
inline void RPCTask::set_allocated_service(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_.IsDefault()) {
          _impl_.service_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.service)
}

// .google.protobuf.Any args = 8;
inline bool RPCTask::has_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.args_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& RPCTask::_internal_args() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.args_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& RPCTask::args() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.args)
  return _internal_args();
}
inline void RPCTask::unsafe_arena_set_allocated_args(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.args_);
  }
  _impl_.args_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DSFramework.DSRPC.Packet.RPCTask.args)
}
inline ::google::protobuf::Any* RPCTask::release_args() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.args_;
  _impl_.args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* RPCTask::unsafe_arena_release_args() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.args)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.args_;
  _impl_.args_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* RPCTask::_internal_mutable_args() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.args_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArena());
    _impl_.args_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.args_;
}
inline ::google::protobuf::Any* RPCTask::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Any* _msg = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.args)
  return _msg;
}
inline void RPCTask::set_allocated_args(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.args_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.args_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.args)
}

// .google.protobuf.Any result = 9;
inline bool RPCTask::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& RPCTask::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& RPCTask::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.result)
  return _internal_result();
}
inline void RPCTask::unsafe_arena_set_allocated_result(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DSFramework.DSRPC.Packet.RPCTask.result)
}
inline ::google::protobuf::Any* RPCTask::release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* released = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* RPCTask::unsafe_arena_release_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCTask.result)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* RPCTask::_internal_mutable_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArena());
    _impl_.result_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.result_;
}
inline ::google::protobuf::Any* RPCTask::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Any* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCTask.result)
  return _msg;
}
inline void RPCTask::set_allocated_result(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.result_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCTask.result)
}

// .DSFramework.DSRPC.Packet.RPCTaskStatus task_status = 10;
inline void RPCTask::clear_task_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_status_ = 0;
}
inline ::DSFramework::DSRPC::Packet::RPCTaskStatus RPCTask::task_status() const {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.task_status)
  return _internal_task_status();
}
inline void RPCTask::set_task_status(::DSFramework::DSRPC::Packet::RPCTaskStatus value) {
  _internal_set_task_status(value);
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.task_status)
}
inline ::DSFramework::DSRPC::Packet::RPCTaskStatus RPCTask::_internal_task_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::DSFramework::DSRPC::Packet::RPCTaskStatus>(_impl_.task_status_);
}
inline void RPCTask::_internal_set_task_status(::DSFramework::DSRPC::Packet::RPCTaskStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.task_status_ = value;
}

// .DSFramework.DSRPC.Packet.RPCTaskResultError task_error = 11;
inline void RPCTask::clear_task_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_error_ = 0;
}
inline ::DSFramework::DSRPC::Packet::RPCTaskResultError RPCTask::task_error() const {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCTask.task_error)
  return _internal_task_error();
}
inline void RPCTask::set_task_error(::DSFramework::DSRPC::Packet::RPCTaskResultError value) {
  _internal_set_task_error(value);
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCTask.task_error)
}
inline ::DSFramework::DSRPC::Packet::RPCTaskResultError RPCTask::_internal_task_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::DSFramework::DSRPC::Packet::RPCTaskResultError>(_impl_.task_error_);
}
inline void RPCTask::_internal_set_task_error(::DSFramework::DSRPC::Packet::RPCTaskResultError value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.task_error_ = value;
}

// -------------------------------------------------------------------

// RPCPacket

// string from = 1;
inline void RPCPacket::clear_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.from_.ClearToEmpty();
}
inline const std::string& RPCPacket::from() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCPacket.from)
  return _internal_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCPacket::set_from(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.from_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCPacket.from)
}
inline std::string* RPCPacket::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCPacket.from)
  return _s;
}
inline const std::string& RPCPacket::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.from_.Get();
}
inline void RPCPacket::_internal_set_from(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.from_.Set(value, GetArena());
}
inline std::string* RPCPacket::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.from_.Mutable( GetArena());
}
inline std::string* RPCPacket::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCPacket.from)
  return _impl_.from_.Release();
}
inline void RPCPacket::set_allocated_from(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.from_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.from_.IsDefault()) {
          _impl_.from_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCPacket.from)
}

// string to = 2;
inline void RPCPacket::clear_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_.ClearToEmpty();
}
inline const std::string& RPCPacket::to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCPacket.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCPacket::set_to(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCPacket.to)
}
inline std::string* RPCPacket::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCPacket.to)
  return _s;
}
inline const std::string& RPCPacket::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_.Get();
}
inline void RPCPacket::_internal_set_to(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_.Set(value, GetArena());
}
inline std::string* RPCPacket::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.to_.Mutable( GetArena());
}
inline std::string* RPCPacket::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCPacket.to)
  return _impl_.to_.Release();
}
inline void RPCPacket::set_allocated_to(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_.IsDefault()) {
          _impl_.to_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCPacket.to)
}

// .DSFramework.DSRPC.Packet.RPCTask task = 3;
inline bool RPCPacket::has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_ != nullptr);
  return value;
}
inline void RPCPacket::clear_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.task_ != nullptr) _impl_.task_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::DSFramework::DSRPC::Packet::RPCTask& RPCPacket::_internal_task() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::DSFramework::DSRPC::Packet::RPCTask* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::DSFramework::DSRPC::Packet::RPCTask&>(::DSFramework::DSRPC::Packet::_RPCTask_default_instance_);
}
inline const ::DSFramework::DSRPC::Packet::RPCTask& RPCPacket::task() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCPacket.task)
  return _internal_task();
}
inline void RPCPacket::unsafe_arena_set_allocated_task(::DSFramework::DSRPC::Packet::RPCTask* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = reinterpret_cast<::DSFramework::DSRPC::Packet::RPCTask*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DSFramework.DSRPC.Packet.RPCPacket.task)
}
inline ::DSFramework::DSRPC::Packet::RPCTask* RPCPacket::release_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::DSFramework::DSRPC::Packet::RPCTask* released = _impl_.task_;
  _impl_.task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::DSFramework::DSRPC::Packet::RPCTask* RPCPacket::unsafe_arena_release_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:DSFramework.DSRPC.Packet.RPCPacket.task)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::DSFramework::DSRPC::Packet::RPCTask* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::DSFramework::DSRPC::Packet::RPCTask* RPCPacket::_internal_mutable_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.task_ == nullptr) {
    auto* p = CreateMaybeMessage<::DSFramework::DSRPC::Packet::RPCTask>(GetArena());
    _impl_.task_ = reinterpret_cast<::DSFramework::DSRPC::Packet::RPCTask*>(p);
  }
  return _impl_.task_;
}
inline ::DSFramework::DSRPC::Packet::RPCTask* RPCPacket::mutable_task() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::DSFramework::DSRPC::Packet::RPCTask* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:DSFramework.DSRPC.Packet.RPCPacket.task)
  return _msg;
}
inline void RPCPacket::set_allocated_task(::DSFramework::DSRPC::Packet::RPCTask* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::DSFramework::DSRPC::Packet::RPCTask*>(_impl_.task_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::DSFramework::DSRPC::Packet::RPCTask*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.task_ = reinterpret_cast<::DSFramework::DSRPC::Packet::RPCTask*>(value);
  // @@protoc_insertion_point(field_set_allocated:DSFramework.DSRPC.Packet.RPCPacket.task)
}

// .DSFramework.DSRPC.Packet.RPCPacketType pkt_type = 4;
inline void RPCPacket::clear_pkt_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pkt_type_ = 0;
}
inline ::DSFramework::DSRPC::Packet::RPCPacketType RPCPacket::pkt_type() const {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCPacket.pkt_type)
  return _internal_pkt_type();
}
inline void RPCPacket::set_pkt_type(::DSFramework::DSRPC::Packet::RPCPacketType value) {
  _internal_set_pkt_type(value);
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCPacket.pkt_type)
}
inline ::DSFramework::DSRPC::Packet::RPCPacketType RPCPacket::_internal_pkt_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::DSFramework::DSRPC::Packet::RPCPacketType>(_impl_.pkt_type_);
}
inline void RPCPacket::_internal_set_pkt_type(::DSFramework::DSRPC::Packet::RPCPacketType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pkt_type_ = value;
}

// .DSFramework.DSRPC.Packet.RPCPacketError pkt_error = 5;
inline void RPCPacket::clear_pkt_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pkt_error_ = 0;
}
inline ::DSFramework::DSRPC::Packet::RPCPacketError RPCPacket::pkt_error() const {
  // @@protoc_insertion_point(field_get:DSFramework.DSRPC.Packet.RPCPacket.pkt_error)
  return _internal_pkt_error();
}
inline void RPCPacket::set_pkt_error(::DSFramework::DSRPC::Packet::RPCPacketError value) {
  _internal_set_pkt_error(value);
  // @@protoc_insertion_point(field_set:DSFramework.DSRPC.Packet.RPCPacket.pkt_error)
}
inline ::DSFramework::DSRPC::Packet::RPCPacketError RPCPacket::_internal_pkt_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::DSFramework::DSRPC::Packet::RPCPacketError>(_impl_.pkt_error_);
}
inline void RPCPacket::_internal_set_pkt_error(::DSFramework::DSRPC::Packet::RPCPacketError value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pkt_error_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Packet
}  // namespace DSRPC
}  // namespace DSFramework


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::DSFramework::DSRPC::Packet::RPCTaskResultError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::DSFramework::DSRPC::Packet::RPCTaskResultError>() {
  return ::DSFramework::DSRPC::Packet::RPCTaskResultError_descriptor();
}
template <>
struct is_proto_enum<::DSFramework::DSRPC::Packet::RPCTaskStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::DSFramework::DSRPC::Packet::RPCTaskStatus>() {
  return ::DSFramework::DSRPC::Packet::RPCTaskStatus_descriptor();
}
template <>
struct is_proto_enum<::DSFramework::DSRPC::Packet::RPCPacketType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::DSFramework::DSRPC::Packet::RPCPacketType>() {
  return ::DSFramework::DSRPC::Packet::RPCPacketType_descriptor();
}
template <>
struct is_proto_enum<::DSFramework::DSRPC::Packet::RPCPacketError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::DSFramework::DSRPC::Packet::RPCPacketError>() {
  return ::DSFramework::DSRPC::Packet::RPCPacketError_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_RPCPacket_2eproto_2epb_2eh
