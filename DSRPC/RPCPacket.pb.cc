// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCPacket.proto

#include "RPCPacket.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace DSFramework {
namespace DSRPC {
namespace Packet {

inline constexpr RPCTask::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        task_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        submitter_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        handler_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        commited_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        completed_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        service_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        args_{nullptr},
        result_{nullptr},
        task_status_{static_cast< ::DSFramework::DSRPC::Packet::RPCTaskStatus >(0)},
        task_error_{static_cast< ::DSFramework::DSRPC::Packet::RPCTaskResultError >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RPCTask::RPCTask(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RPCTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPCTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPCTaskDefaultTypeInternal() {}
  union {
    RPCTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPCTaskDefaultTypeInternal _RPCTask_default_instance_;

inline constexpr RPCPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        from_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        to_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        task_{nullptr},
        pkt_type_{static_cast< ::DSFramework::DSRPC::Packet::RPCPacketType >(0)},
        pkt_error_{static_cast< ::DSFramework::DSRPC::Packet::RPCPacketError >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RPCPacket::RPCPacket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RPCPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPCPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPCPacketDefaultTypeInternal() {}
  union {
    RPCPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPCPacketDefaultTypeInternal _RPCPacket_default_instance_;
}  // namespace Packet
}  // namespace DSRPC
}  // namespace DSFramework
static ::_pb::Metadata file_level_metadata_RPCPacket_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_RPCPacket_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_RPCPacket_2eproto = nullptr;
const ::uint32_t TableStruct_RPCPacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.task_uid_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.submitter_uid_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.handler_uid_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.created_time_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.commited_time_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.completed_time_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.service_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.args_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.task_status_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCTask, _impl_.task_error_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _impl_.task_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _impl_.pkt_type_),
    PROTOBUF_FIELD_OFFSET(::DSFramework::DSRPC::Packet::RPCPacket, _impl_.pkt_error_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 19, -1, sizeof(::DSFramework::DSRPC::Packet::RPCTask)},
        {30, 43, -1, sizeof(::DSFramework::DSRPC::Packet::RPCPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::DSFramework::DSRPC::Packet::_RPCTask_default_instance_._instance,
    &::DSFramework::DSRPC::Packet::_RPCPacket_default_instance_._instance,
};
const char descriptor_table_protodef_RPCPacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017RPCPacket.proto\022\030DSFramework.DSRPC.Pac"
    "ket\032\031google/protobuf/any.proto\"\347\002\n\007RPCTa"
    "sk\022\020\n\010task_uid\030\001 \001(\t\022\025\n\rsubmitter_uid\030\002 "
    "\001(\t\022\023\n\013handler_uid\030\003 \001(\t\022\024\n\014created_time"
    "\030\004 \001(\t\022\025\n\rcommited_time\030\005 \001(\t\022\026\n\016complet"
    "ed_time\030\006 \001(\t\022\017\n\007service\030\007 \001(\t\022\"\n\004args\030\010"
    " \001(\0132\024.google.protobuf.Any\022$\n\006result\030\t \001"
    "(\0132\024.google.protobuf.Any\022<\n\013task_status\030"
    "\n \001(\0162\'.DSFramework.DSRPC.Packet.RPCTask"
    "Status\022@\n\ntask_error\030\013 \001(\0162,.DSFramework"
    ".DSRPC.Packet.RPCTaskResultError\"\316\001\n\tRPC"
    "Packet\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022/\n\004task"
    "\030\003 \001(\0132!.DSFramework.DSRPC.Packet.RPCTas"
    "k\0229\n\010pkt_type\030\004 \001(\0162\'.DSFramework.DSRPC."
    "Packet.RPCPacketType\022;\n\tpkt_error\030\005 \001(\0162"
    "(.DSFramework.DSRPC.Packet.RPCPacketErro"
    "r*z\n\022RPCTaskResultError\022\021\n\rTASK_NO_ERROR"
    "\020\000\022\032\n\026TASK_SERVICE_NOT_FOUND\020\001\022\031\n\025TASK_I"
    "NVALID_ARGUMENT\020\002\022\032\n\026TASK_SERVICE_EXCEPT"
    "ION\020\003*9\n\rRPCTaskStatus\022\013\n\007WAITING\020\000\022\014\n\010C"
    "OMMITED\020\001\022\r\n\tCOMPLETED\020\002*m\n\rRPCPacketTyp"
    "e\022\024\n\020RPC_TASK_REQUEST\020\000\022\025\n\021RPC_TASK_RESP"
    "ONSE\020\001\022\022\n\016RPC_TASK_QUERY\020\002\022\033\n\027RPC_TASK_Q"
    "UERY_RESPONSE\020\003*s\n\016RPCPacketError\022\020\n\014PKT"
    "_NO_ERROR\020\000\022\033\n\027PKT_SERIALIZATION_ERROR\020\001"
    "\022\035\n\031PKT_DESERIALIZATION_ERROR\020\002\022\023\n\017PKT_P"
    "OST_FAILED\020\003b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_RPCPacket_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_RPCPacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RPCPacket_2eproto = {
    false,
    false,
    1060,
    descriptor_table_protodef_RPCPacket_2eproto,
    "RPCPacket.proto",
    &descriptor_table_RPCPacket_2eproto_once,
    descriptor_table_RPCPacket_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_RPCPacket_2eproto::offsets,
    file_level_metadata_RPCPacket_2eproto,
    file_level_enum_descriptors_RPCPacket_2eproto,
    file_level_service_descriptors_RPCPacket_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RPCPacket_2eproto_getter() {
  return &descriptor_table_RPCPacket_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RPCPacket_2eproto(&descriptor_table_RPCPacket_2eproto);
namespace DSFramework {
namespace DSRPC {
namespace Packet {
const ::google::protobuf::EnumDescriptor* RPCTaskResultError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_RPCPacket_2eproto);
  return file_level_enum_descriptors_RPCPacket_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t RPCTaskResultError_internal_data_[] = {
    262144u, 0u, };
bool RPCTaskResultError_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RPCTaskStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_RPCPacket_2eproto);
  return file_level_enum_descriptors_RPCPacket_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t RPCTaskStatus_internal_data_[] = {
    196608u, 0u, };
bool RPCTaskStatus_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* RPCPacketType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_RPCPacket_2eproto);
  return file_level_enum_descriptors_RPCPacket_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t RPCPacketType_internal_data_[] = {
    262144u, 0u, };
bool RPCPacketType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RPCPacketError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_RPCPacket_2eproto);
  return file_level_enum_descriptors_RPCPacket_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t RPCPacketError_internal_data_[] = {
    262144u, 0u, };
bool RPCPacketError_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class RPCTask::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCTask>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RPCTask, _impl_._has_bits_);
  static const ::google::protobuf::Any& args(const RPCTask* msg);
  static void set_has_args(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Any& result(const RPCTask* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Any& RPCTask::_Internal::args(const RPCTask* msg) {
  return *msg->_impl_.args_;
}
const ::google::protobuf::Any& RPCTask::_Internal::result(const RPCTask* msg) {
  return *msg->_impl_.result_;
}
void RPCTask::clear_args() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.args_ != nullptr) _impl_.args_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RPCTask::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RPCTask::RPCTask(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DSFramework.DSRPC.Packet.RPCTask)
}
inline PROTOBUF_NDEBUG_INLINE RPCTask::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        task_uid_(arena, from.task_uid_),
        submitter_uid_(arena, from.submitter_uid_),
        handler_uid_(arena, from.handler_uid_),
        created_time_(arena, from.created_time_),
        commited_time_(arena, from.commited_time_),
        completed_time_(arena, from.completed_time_),
        service_(arena, from.service_) {}

RPCTask::RPCTask(
    ::google::protobuf::Arena* arena,
    const RPCTask& from)
    : ::google::protobuf::Message(arena) {
  RPCTask* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.args_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.args_)
                : nullptr;
  _impl_.result_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.result_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, task_status_),
           offsetof(Impl_, task_error_) -
               offsetof(Impl_, task_status_) +
               sizeof(Impl_::task_error_));

  // @@protoc_insertion_point(copy_constructor:DSFramework.DSRPC.Packet.RPCTask)
}
inline PROTOBUF_NDEBUG_INLINE RPCTask::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        task_uid_(arena),
        submitter_uid_(arena),
        handler_uid_(arena),
        created_time_(arena),
        commited_time_(arena),
        completed_time_(arena),
        service_(arena) {}

inline void RPCTask::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, args_),
           0,
           offsetof(Impl_, task_error_) -
               offsetof(Impl_, args_) +
               sizeof(Impl_::task_error_));
}
RPCTask::~RPCTask() {
  // @@protoc_insertion_point(destructor:DSFramework.DSRPC.Packet.RPCTask)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RPCTask::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.task_uid_.Destroy();
  _impl_.submitter_uid_.Destroy();
  _impl_.handler_uid_.Destroy();
  _impl_.created_time_.Destroy();
  _impl_.commited_time_.Destroy();
  _impl_.completed_time_.Destroy();
  _impl_.service_.Destroy();
  delete _impl_.args_;
  delete _impl_.result_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RPCTask::Clear() {
// @@protoc_insertion_point(message_clear_start:DSFramework.DSRPC.Packet.RPCTask)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_uid_.ClearToEmpty();
  _impl_.submitter_uid_.ClearToEmpty();
  _impl_.handler_uid_.ClearToEmpty();
  _impl_.created_time_.ClearToEmpty();
  _impl_.commited_time_.ClearToEmpty();
  _impl_.completed_time_.ClearToEmpty();
  _impl_.service_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.args_ != nullptr);
      _impl_.args_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
  }
  ::memset(&_impl_.task_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.task_error_) -
      reinterpret_cast<char*>(&_impl_.task_status_)) + sizeof(_impl_.task_error_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RPCTask::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 2, 127, 2> RPCTask::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RPCTask, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RPCTask_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string task_uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_uid_)}},
    // string submitter_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.submitter_uid_)}},
    // string handler_uid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.handler_uid_)}},
    // string created_time = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.created_time_)}},
    // string commited_time = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.commited_time_)}},
    // string completed_time = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.completed_time_)}},
    // string service = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.service_)}},
    // .google.protobuf.Any args = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.args_)}},
    // .google.protobuf.Any result = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.result_)}},
    // .DSFramework.DSRPC.Packet.RPCTaskStatus task_status = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RPCTask, _impl_.task_status_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_status_)}},
    // .DSFramework.DSRPC.Packet.RPCTaskResultError task_error = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RPCTask, _impl_.task_error_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_error_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string task_uid = 1;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string submitter_uid = 2;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.submitter_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string handler_uid = 3;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.handler_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string created_time = 4;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.created_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string commited_time = 5;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.commited_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string completed_time = 6;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.completed_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string service = 7;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.service_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Any args = 8;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.args_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Any result = 9;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.result_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DSFramework.DSRPC.Packet.RPCTaskStatus task_status = 10;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .DSFramework.DSRPC.Packet.RPCTaskResultError task_error = 11;
    {PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_error_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
    "\40\10\15\13\14\15\16\7\0\0\0\0\0\0\0\0"
    "DSFramework.DSRPC.Packet.RPCTask"
    "task_uid"
    "submitter_uid"
    "handler_uid"
    "created_time"
    "commited_time"
    "completed_time"
    "service"
  }},
};

::uint8_t* RPCTask::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DSFramework.DSRPC.Packet.RPCTask)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string task_uid = 1;
  if (!this->_internal_task_uid().empty()) {
    const std::string& _s = this->_internal_task_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.task_uid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string submitter_uid = 2;
  if (!this->_internal_submitter_uid().empty()) {
    const std::string& _s = this->_internal_submitter_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.submitter_uid");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string handler_uid = 3;
  if (!this->_internal_handler_uid().empty()) {
    const std::string& _s = this->_internal_handler_uid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.handler_uid");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string created_time = 4;
  if (!this->_internal_created_time().empty()) {
    const std::string& _s = this->_internal_created_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.created_time");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string commited_time = 5;
  if (!this->_internal_commited_time().empty()) {
    const std::string& _s = this->_internal_commited_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.commited_time");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string completed_time = 6;
  if (!this->_internal_completed_time().empty()) {
    const std::string& _s = this->_internal_completed_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.completed_time");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string service = 7;
  if (!this->_internal_service().empty()) {
    const std::string& _s = this->_internal_service();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCTask.service");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any args = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::args(this),
        _Internal::args(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any result = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // .DSFramework.DSRPC.Packet.RPCTaskStatus task_status = 10;
  if (this->_internal_task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_task_status(), target);
  }

  // .DSFramework.DSRPC.Packet.RPCTaskResultError task_error = 11;
  if (this->_internal_task_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_task_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DSFramework.DSRPC.Packet.RPCTask)
  return target;
}

::size_t RPCTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSFramework.DSRPC.Packet.RPCTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_uid = 1;
  if (!this->_internal_task_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_task_uid());
  }

  // string submitter_uid = 2;
  if (!this->_internal_submitter_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_submitter_uid());
  }

  // string handler_uid = 3;
  if (!this->_internal_handler_uid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_handler_uid());
  }

  // string created_time = 4;
  if (!this->_internal_created_time().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_created_time());
  }

  // string commited_time = 5;
  if (!this->_internal_commited_time().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_commited_time());
  }

  // string completed_time = 6;
  if (!this->_internal_completed_time().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_completed_time());
  }

  // string service = 7;
  if (!this->_internal_service().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_service());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Any args = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.args_);
    }

    // .google.protobuf.Any result = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_);
    }

  }
  // .DSFramework.DSRPC.Packet.RPCTaskStatus task_status = 10;
  if (this->_internal_task_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  // .DSFramework.DSRPC.Packet.RPCTaskResultError task_error = 11;
  if (this->_internal_task_error() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_task_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RPCTask::_class_data_ = {
    RPCTask::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RPCTask::GetClassData() const {
  return &_class_data_;
}

void RPCTask::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RPCTask*>(&to_msg);
  auto& from = static_cast<const RPCTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DSFramework.DSRPC.Packet.RPCTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_uid().empty()) {
    _this->_internal_set_task_uid(from._internal_task_uid());
  }
  if (!from._internal_submitter_uid().empty()) {
    _this->_internal_set_submitter_uid(from._internal_submitter_uid());
  }
  if (!from._internal_handler_uid().empty()) {
    _this->_internal_set_handler_uid(from._internal_handler_uid());
  }
  if (!from._internal_created_time().empty()) {
    _this->_internal_set_created_time(from._internal_created_time());
  }
  if (!from._internal_commited_time().empty()) {
    _this->_internal_set_commited_time(from._internal_commited_time());
  }
  if (!from._internal_completed_time().empty()) {
    _this->_internal_set_completed_time(from._internal_completed_time());
  }
  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_args()->::google::protobuf::Any::MergeFrom(
          from._internal_args());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_result()->::google::protobuf::Any::MergeFrom(
          from._internal_result());
    }
  }
  if (from._internal_task_status() != 0) {
    _this->_internal_set_task_status(from._internal_task_status());
  }
  if (from._internal_task_error() != 0) {
    _this->_internal_set_task_error(from._internal_task_error());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RPCTask::CopyFrom(const RPCTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSFramework.DSRPC.Packet.RPCTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RPCTask::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RPCTask::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RPCTask::InternalSwap(RPCTask* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.task_uid_, &other->_impl_.task_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.submitter_uid_, &other->_impl_.submitter_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.handler_uid_, &other->_impl_.handler_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_time_, &other->_impl_.created_time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commited_time_, &other->_impl_.commited_time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.completed_time_, &other->_impl_.completed_time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_, &other->_impl_.service_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_error_)
      + sizeof(RPCTask::_impl_.task_error_)
      - PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.args_)>(
          reinterpret_cast<char*>(&_impl_.args_),
          reinterpret_cast<char*>(&other->_impl_.args_));
}

::google::protobuf::Metadata RPCTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RPCPacket_2eproto_getter, &descriptor_table_RPCPacket_2eproto_once,
      file_level_metadata_RPCPacket_2eproto[0]);
}
// ===================================================================

class RPCPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_._has_bits_);
  static const ::DSFramework::DSRPC::Packet::RPCTask& task(const RPCPacket* msg);
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DSFramework::DSRPC::Packet::RPCTask& RPCPacket::_Internal::task(const RPCPacket* msg) {
  return *msg->_impl_.task_;
}
RPCPacket::RPCPacket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DSFramework.DSRPC.Packet.RPCPacket)
}
inline PROTOBUF_NDEBUG_INLINE RPCPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        from_(arena, from.from_),
        to_(arena, from.to_) {}

RPCPacket::RPCPacket(
    ::google::protobuf::Arena* arena,
    const RPCPacket& from)
    : ::google::protobuf::Message(arena) {
  RPCPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.task_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::DSFramework::DSRPC::Packet::RPCTask>(arena, *from._impl_.task_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pkt_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pkt_type_),
           offsetof(Impl_, pkt_error_) -
               offsetof(Impl_, pkt_type_) +
               sizeof(Impl_::pkt_error_));

  // @@protoc_insertion_point(copy_constructor:DSFramework.DSRPC.Packet.RPCPacket)
}
inline PROTOBUF_NDEBUG_INLINE RPCPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        from_(arena),
        to_(arena) {}

inline void RPCPacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_),
           0,
           offsetof(Impl_, pkt_error_) -
               offsetof(Impl_, task_) +
               sizeof(Impl_::pkt_error_));
}
RPCPacket::~RPCPacket() {
  // @@protoc_insertion_point(destructor:DSFramework.DSRPC.Packet.RPCPacket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RPCPacket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
  delete _impl_.task_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RPCPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:DSFramework.DSRPC.Packet.RPCPacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.task_ != nullptr);
    _impl_.task_->Clear();
  }
  ::memset(&_impl_.pkt_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pkt_error_) -
      reinterpret_cast<char*>(&_impl_.pkt_type_)) + sizeof(_impl_.pkt_error_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RPCPacket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 49, 2> RPCPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RPCPacket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string from = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.from_)}},
    // string to = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.to_)}},
    // .DSFramework.DSRPC.Packet.RPCTask task = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.task_)}},
    // .DSFramework.DSRPC.Packet.RPCPacketType pkt_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RPCPacket, _impl_.pkt_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.pkt_type_)}},
    // .DSFramework.DSRPC.Packet.RPCPacketError pkt_error = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RPCPacket, _impl_.pkt_error_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.pkt_error_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string from = 1;
    {PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.from_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string to = 2;
    {PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.to_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .DSFramework.DSRPC.Packet.RPCTask task = 3;
    {PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.task_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .DSFramework.DSRPC.Packet.RPCPacketType pkt_type = 4;
    {PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.pkt_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .DSFramework.DSRPC.Packet.RPCPacketError pkt_error = 5;
    {PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.pkt_error_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::DSFramework::DSRPC::Packet::RPCTask>()},
  }}, {{
    "\42\4\2\0\0\0\0\0"
    "DSFramework.DSRPC.Packet.RPCPacket"
    "from"
    "to"
  }},
};

::uint8_t* RPCPacket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DSFramework.DSRPC.Packet.RPCPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    const std::string& _s = this->_internal_from();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCPacket.from");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    const std::string& _s = this->_internal_to();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "DSFramework.DSRPC.Packet.RPCPacket.to");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DSFramework.DSRPC.Packet.RPCTask task = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // .DSFramework.DSRPC.Packet.RPCPacketType pkt_type = 4;
  if (this->_internal_pkt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_pkt_type(), target);
  }

  // .DSFramework.DSRPC.Packet.RPCPacketError pkt_error = 5;
  if (this->_internal_pkt_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_pkt_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DSFramework.DSRPC.Packet.RPCPacket)
  return target;
}

::size_t RPCPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSFramework.DSRPC.Packet.RPCPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_from());
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_to());
  }

  // .DSFramework.DSRPC.Packet.RPCTask task = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.task_);
  }

  // .DSFramework.DSRPC.Packet.RPCPacketType pkt_type = 4;
  if (this->_internal_pkt_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_pkt_type());
  }

  // .DSFramework.DSRPC.Packet.RPCPacketError pkt_error = 5;
  if (this->_internal_pkt_error() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_pkt_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RPCPacket::_class_data_ = {
    RPCPacket::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RPCPacket::GetClassData() const {
  return &_class_data_;
}

void RPCPacket::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RPCPacket*>(&to_msg);
  auto& from = static_cast<const RPCPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DSFramework.DSRPC.Packet.RPCPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_task()->::DSFramework::DSRPC::Packet::RPCTask::MergeFrom(
        from._internal_task());
  }
  if (from._internal_pkt_type() != 0) {
    _this->_internal_set_pkt_type(from._internal_pkt_type());
  }
  if (from._internal_pkt_error() != 0) {
    _this->_internal_set_pkt_error(from._internal_pkt_error());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RPCPacket::CopyFrom(const RPCPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSFramework.DSRPC.Packet.RPCPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RPCPacket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RPCPacket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RPCPacket::InternalSwap(RPCPacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_, &other->_impl_.from_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.to_, &other->_impl_.to_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.pkt_error_)
      + sizeof(RPCPacket::_impl_.pkt_error_)
      - PROTOBUF_FIELD_OFFSET(RPCPacket, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::google::protobuf::Metadata RPCPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RPCPacket_2eproto_getter, &descriptor_table_RPCPacket_2eproto_once,
      file_level_metadata_RPCPacket_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Packet
}  // namespace DSRPC
}  // namespace DSFramework
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
